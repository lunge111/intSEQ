library(edgeR)
library(intSEQ)
make.matrix<- function(nb.mean,disp, nsamp,ngene){
  dat = rnbinom(nsamp*ngene*2,mu=nb.mean,size=1/disp)
  matrix(dat,ncol=nsamp*2)
}
add.zero<-function(mat,p){
  pmat = matrix(rbinom(length(mat),size=1, prob= p), ncol = ncol(mat))
  mat[pmat==1]=0
  mat
}

getpLM <- function(y,x){
  fit = lm(y~x)
  s=summary(fit)
s$coefficients[2,4]
  }

tran1 <-  function(y,c1)
  {
    ty <- log(y+sqrt(y^2+y/c1)+1/(2*c1))
    return(ty)
  }


pp<-function(nb.mean, disp,nsamp,ngene,z.prob){
  m = make.matrix(nb.mean, disp,nsamp,ngene)
  m2 <- add.zero(m,z.prob)
  cond = factor(rep(0:1,each=nsamp))
  v1 = tran1(m, disp)
  v2= tran1(m2,disp)
    p1=apply(v1, 1, getpLM, x = cond)
  p2=apply(v2, 1, getpLM, x = cond)
  cbind(p1,p2)
}


pp3<-function(mle,nsamp,z.prob){
  m = NBsimu(mle1 = mle1,null=T, nsamp = 8,norm = F)$cd
  m2 <- add.zero(m,z.prob)
  cond = factor(rep(0:1,each=nsamp))
  design = model.matrix(~cond)
  m = DGEList(m)
  m2 = DGEList(m2)
  v <- voom(m, design, plot = FALSE)
  fit <- lmFit(v, design)
  p1 <- eBayes(fit)$p.value[,2]
  v2 <- voom(m2, design, plot = FALSE)
  fit2 <- lmFit(v2, design)
  p2 <- eBayes(fit2)$p.value[,2]
  cbind(p1,p2)
}

pp2<- function(mle,nsamp,nsim,z.prob){
  P=NULL
  for(i in 1:nsim){
    pp=pp3(mle,nsamp,z.prob)
    P=rbind(P,pp)
  }
  P
}

p1=pp(8,.1,20,100000,0.95)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p1[,1]),log='xy', ylim=c(1e-6,0.5),type="b",xlab="levels",ylab = "FPR", main = "trans, p=0.95")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p1[,2]),type="b",col=2)
abline(a=0,b=1,lty=2)
legend("topleft",legend = c("ordinary","filter"),lty=1,col=1:2)

p2=pp(8,.1,10,100000,0.9)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p2[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p2[,2]),type="b",col=2)
abline(a=0,b=1,lty=1)

p3=pp(8,.1,10,100000,0.8)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p3[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p3[,2]),type="b",col=2)
abline(a=0,b=1,lty=1)


p4=pp(8,.1,10,100000,0.7)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p4[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p4[,2]),type="b",col=2)
abline(a=0,b=1,lty=1)

p5=pp(8,.1,10,100000,0.3)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p5[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(p5[,2]),type="b",col=2)
abline(a=0,b=1,lty=1)




t1=pp2(mle1,20,10,.95)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t1[,1]),log='xy', ylim=c(1e-6,0.5),type="b",xlab="levels",ylab = "FPR", main = "voom, p=0.95")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t1[,2]),type="b",col=2)
abline(a=0,b=1,lty=2)
legend("topleft",legend = c("ordinary","filter"),lty=1,col=1:2)

t2=pp2(80,.1,10,100000,0.9)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t2[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t2[,2]),type="b",col=2)
abline(a=0,b=1,lty=2)

t3=pp2(80,.1,10,100000,0.8)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t3[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t3[,2]),type="b",col=2)
abline(a=0,b=1,lty=2)


t4=pp2(80,.1,10,100000,0.7)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t4[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t4[,2]),type="b",col=2)
abline(a=0,b=1,lty=2)

t5=pp2(80,.1,10,100000,0.3)
plot(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t5[,1]),log='xy', ylim=c(1e-6,0.5),type="b")
points(c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1), pcut(t5[,2]),type="b",col=2)
abline(a=0,b=1,lty=2)




library(edgeR)
keep  <- rowMeans(count.data)>0.1
count.data=count.data2[keep, ]
dim(count.data)
design=model.matrix(~condition)
d <- DGEList(counts = count.data)
disp = estimateDisp(d, design,prior.df = 0)



save.image("montpick.Rdata")