data(count.data)
data(condition)


res=intSEQ(count.data, condition,w1=1,w2=1)



simu.res3001 <- simuComp(res, ntime = 5,nsamp = 150,null = T,w1=0.7,w2=0.7)


simu.res100 <- simuComp(res, ntime = 20,nsamp = 100,null = T,w1=0.9,w2=0.9)



simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,,lambda1=200,null = T,w1=.95,w2=.95)

simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=0.97,w2=0.97)


simu.res3 <- simuComp(res, ntime = 40,nsamp = 3,null = T,w1=1,w2=1)

plotComp(simu.res50)

ff<-function(y,mu,theta){
  log(gamma(y+1/theta))-log(gamma(1/theta))+y*log(mu)-(y+1/theta)*log(1+theta*mu)+y*log(theta)
}
ff(1,1,1)
f=expression(log(gamma(y+1/theta))-log(gamma(1/theta))+y*log(mu)-(y+1/theta)*log(1+theta*mu)+y*log(theta))
D(D(f,"theta"),"theta")
g=function(y,mu,theta){
  -(y * (1/theta^2) - ((y + 1/theta) * (mu * mu/(1 + theta * mu)^2) + 
                         1/theta^2 * (mu/(1 + theta * mu)) + (1/theta^2 * (mu/(1 + 
                                                                                 theta * mu)) - 2 * theta/(theta^2)^2 * log(1 + theta * mu)) + 
                         ((1/theta^2 * (gamma(y + 1/theta) * (1/theta^2 * trigamma(y + 
                                                                                     1/theta)) + 1/theta^2 * (gamma(y + 1/theta) * digamma(y + 
                                                                                                                                             1/theta)) * digamma(y + 1/theta)) + 2 * theta/(theta^2)^2 * 
                             (gamma(y + 1/theta) * digamma(y + 1/theta)))/gamma(y + 
                                                                                  1/theta) - 1/theta^2 * (gamma(y + 1/theta) * digamma(y + 
                                                                                                                                         1/theta)) * (1/theta^2 * (gamma(y + 1/theta) * digamma(y + 
                                                                                                                                                                                                  1/theta)))/gamma(y + 1/theta)^2 - ((1/theta^2 * (gamma(1/theta) * 
                                                                                                                                                                                                                                                     (1/theta^2 * trigamma(1/theta)) + 1/theta^2 * (gamma(1/theta) * 
                                                                                                                                                                                                                                                                                                      digamma(1/theta)) * digamma(1/theta)) + 2 * theta/(theta^2)^2 * 
                                                                                                                                                                                                                                        (gamma(1/theta) * digamma(1/theta)))/gamma(1/theta) - 
                                                                                                                                                                                                                                       1/theta^2 * (gamma(1/theta) * digamma(1/theta)) * (1/theta^2 * 
                                                                                                                                                                                                                                                                                            (gamma(1/theta) * digamma(1/theta)))/gamma(1/theta)^2))))
}



g(1,1,1)

w1=1
w2=1

data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
  
  joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
                                                                           ,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
  
  joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
                                                                           ,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
  w2=1
  Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0.1, sigmaHat = 0.9, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
