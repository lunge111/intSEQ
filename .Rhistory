data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 10,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 10,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 20,null = T)
plotComp(simu.res)
condition
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 30,null = T)
plotComp(simu.res)
res=intSEQ(count.data, condition)
simu.res <- simuComp(res, ntime = 30,null = T)
plotComp(simu.res)
simu.res <- simuComp(res, ntime = 10,nsamp = 30,null = T)
plotComp(simu.res)
library(intSEQ)
simu.res100 <- simuComp(res, ntime = 5,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=0.97,w2=0.97)
library(intSEQ)
data(count.data)
data(condition)
res=intSEQ(count.data, condition,w1=1,w2=1)
simu.res3001 <- simuComp(res, ntime = 5,nsamp = 150,null = T,w1=0.7,w2=0.7)
simu.res100 <- simuComp(res, ntime = 5,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=0.97,w2=0.97)
library(intSEQ)
data(count.data)
data(condition)
res=intSEQ(count.data, condition,w1=1,w2=1)
simu.res3001 <- simuComp(res, ntime = 5,nsamp = 150,null = T,w1=0.7,w2=0.7)
simu.res100 <- simuComp(res, ntime = 5,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=0.97,w2=0.97)
plotComp(simu.res3001)
plotComp(simu.res100)
plotComp(simu.res50)
plotComp(simu.res30)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=1,w2=1)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=1,w2=1)
simu.res3 <- simuComp(res, ntime = 10,nsamp = 3,null = T,w1=1,w2=1)
plotComp(simu.res30)
simu.res30 <- simuComp(res, ntime = 10,nsamp = 30,null = T,w1=1,w2=1)
plotComp(simu.res30)
simu.res3 <- simuComp(res, ntime = 40,nsamp = 3,null = T,w1=1,w2=1)
plotComp(simu.res3)
simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=1,w2=1)
plotComp(simu.res30)
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
fullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond,m0,ma, null=F,const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ghrule <- gaussHermiteData(50)
w1=0.9=w2
w2=0.9
data = rnbinom(1-,mu=5,size=1)
data = rnbinom(1,mu=5,size=1)
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
sdd=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ghrule <- gaussHermiteData(50)
library(fastGHQuad)
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
w1=0.9
w2=0.9
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -n
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
sigma
sqrt(-1/Hhat)
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
sqrt(-1/Hhat)
muu
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
const=1
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc, rule = ghrule)
nullLik2
w1=1
w2=1
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
nullLik2=ghQuad(f = nullfunc, rule = ghrule)
nullLik
nullLik2
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
w1=1
w2=1
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 2, rule = ghrule)
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik
nullLik=aghQuad(g = nullfunc, muHat = 5, sigmaHat = 2, rule = ghrule)
nullLik
nullLik=aghQuad(g = nullfunc, muHat = 5, sigmaHat = 2, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 2, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 0.1, rule = ghrule)
nullLik
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 0.9, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0.1, sigmaHat = 0.9, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
?ghQuad
?gaussHermiteData
simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=0.97,w2=0.97)
plotComp(simu.res30)
library(intSEQ)
simu.res100 <- simuComp(res, ntime = 20,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=0.97,w2=0.97)
plotComp(simu.res30)
plotComp(simu.res50)
plotComp(simu.res100)
simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,,lambda1=200,null = T,w1=.95,w2=.95)
plotComp(simu.res50)
simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,,lambda1=500,null = T,w1=.95,w2=.95)
plotComp(simu.res50)
library(intSEQ)
library(intSEQ)
getwd()
library(intSEQ)
library(intSEQ)
library(intSEQ)
data("count.data")
time30 <- replicate(10, intSEQ(count.data[,sample(1:129, 60, replace = F)],rep(1:2,each=30),w1=1))
time30 <- replicate(10, intSEQ(count.data[,sample(1:129, 60, replace = F)],rep(1:2,each=30),w1=1,w2=1))
time30 <- replicate(2, intSEQ(count.data[,sample(1:129, 60, replace = F)],rep(1:2,each=30),w1=1,w2=1))
time30 <- replicate(3, intSEQ(count.data[,sample(1:129, 60, replace = F)],rep(1:2,each=30),w1=1,w2=1))
warnings()
intSEQ(count.data[,sample(1:129, 60, replace = F)],rep(1:2,each=30))
res<-.Last.value
pp=res$restable$intPValue
pp
1-pchsq(0.0001)
pchisq(pp,df=1)
hist(pchisq(pp,df=1))
table(pp)
sts= res$restable$intLR
sum(sts==0.0001)
which(sts==0.0001)
res=intSEQ(count.data[,1:60],rep(1:2,each=30),w1=1)
sts= res$restable$intLR
sum(sts==0.0001)
which(sts==0.0001)
count.data[12,1:60]
ys = count.data[12,1:60]
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data,  m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
fullfunc <- function(y){
joint.likelihood(exp(y),ys=data, m0,ma, null=F,const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ys = count.data[95,1:60]
ys
ys = mean(count.data[12,1:60])
mean(count.data[12,1:60])
mean(count.data[95,1:60])
index=(sts==0.0001)
index
rowMeans(count.data[index,1:60])
log(0.2)
library(intSEQ)
library(intSEQ)
install.packages(c("devtools", "dplyr", "MASS", "pkgbuild", "pkgload", "ps", "rlang", "stringi", "testthat", "tidyselect", "tinytex", "xfun"))
library(intSEQ)
library(intSEQ)
library(intSEQ)
Sys.getenv()['PATH']
?integrate
89*1.15
load("F:/de1_3.Rdata")
de1=de3res[[1]]
de1
de1[[1]]
fdr<- function(pl, ee, level,k){
pv=pl[,k]
qv= p.adjust(pv, method = "BH")
de = qv<level
R = sum(de)
V = sum(ee&de)
ifelse(R==0, 0, V/R)
}
fdr<- function(pl, ee, level,k){
pv=pl[,k]
qv= p.adjust(pv, method = "BH")
de = qv<level
R = sum(de)
V = sum(ee&de)
ifelse(R==0, 0, V/R)
}
findFDR <- function(obj, levels=0.1){
#given the object returned by FPsimulation, calculate the empirical FDR
#@obj: object returned by FPsimulation
#@levels: FDR levels to test against
ee = obj[[1]][,5]
voomfdr = mean(sapply(obj, fdr, level = levels,ee=ee,k=1))
transfdr = mean(sapply(obj, fdr, level = levels,ee=ee,k=2))
intfdr = mean(sapply(obj, fdr, level = levels,ee=ee,k=3))
quasifdr = mean(sapply(obj, fdr, level = levels,ee=ee,k=4))
c(quasi = quasifdr, voom  = voomfdr, trans = transfdr, int = intfdr )
}
findFDR(de1[[1]],0.1)
de1[[1]]
de1[[1]][,5]
findFDR(de1[[1]],0.1)
findFDR(de1,0.1)
} warnings()
warnings()
sum(de1[[1]][,5])
de1[[1]][,5]
dim(de1[[1]])
findFDR(de1,0.1)
warnings()
fdr[de1[[1]],ee=de1[[1]][,5],level=.1,k=1]
fdr(de1[[1]],ee=de1[[1]][,5],level=.1,k=1)
fdr(de1[[2]],ee=de1[[1]][,5],level=.1,k=1)
ee=de1[[1]][,5]
length(ee)
length(de1[[1]][,1])
length(de1[[2]][,1])
findFDR <- function(obj, levels=0.1){
#given the object returned by FPsimulation, calculate the empirical FDR
#@obj: object returned by FPsimulation
#@levels: FDR levels to test against
ee = obj[[1]][,5]
voomfdr = mean(sapply(obj, fdr, level = levels,k=1))
transfdr = mean(sapply(obj, fdr, level = levels,k=2))
intfdr = mean(sapply(obj, fdr, level = levels,k=3))
quasifdr = mean(sapply(obj, fdr, level = levels,k=4))
c(quasi = quasifdr, voom  = voomfdr, trans = transfdr, int = intfdr )
}
findFDR(de1,0.1)
fdr<- function(pl, level,k){
ee=pl[,5]
pv=pl[,k]
qv= p.adjust(pv, method = "BH")
de = qv<level
R = sum(de)
V = sum(ee&de)
ifelse(R==0, 0, V/R)
}
findFDR <- function(obj, levels=0.1){
#given the object returned by FPsimulation, calculate the empirical FDR
#@obj: object returned by FPsimulation
#@levels: FDR levels to test against
ee = obj[[1]][,5]
voomfdr = mean(sapply(obj, fdr, level = levels,k=1))
transfdr = mean(sapply(obj, fdr, level = levels,k=2))
intfdr = mean(sapply(obj, fdr, level = levels,k=3))
quasifdr = mean(sapply(obj, fdr, level = levels,k=4))
c(quasi = quasifdr, voom  = voomfdr, trans = transfdr, int = intfdr )
}
findFDR(de1,0.1)
load("F:/de1_3.Rdata")
de3=de3res[[1]]
de3. =de3res[[2]]
#FDR for NB simulation
de3.1<-findFDR(de3)
fdr<- function(pl, level,k){
ee=pl[,5]
pv=pl[,k]
qv= p.adjust(pv, method = "BH")
de = qv<level
R = sum(de)
V = sum(ee&de)
ifelse(R==0, 0, V/R)
}
findFDR <- function(obj, levels=0.1){
#given the object returned by FPsimulation, calculate the empirical FDR
#@obj: object returned by FPsimulation
#@levels: FDR levels to test against
ee = obj[[1]][,5]
voomfdr = mean(sapply(obj, fdr, level = levels,k=1))
transfdr = mean(sapply(obj, fdr, level = levels,k=2))
intfdr = mean(sapply(obj, fdr, level = levels,k=3))
quasifdr = mean(sapply(obj, fdr, level = levels,k=4))
c(quasi = quasifdr, voom  = voomfdr, trans = transfdr, int = intfdr )
}
#FDR for NB simulation
de3.1<-findFDR(de3)
de3.2<-findFDR(de3.)
#0.05 level
de3.1.<-findFDR(de3,level = 0.05)
de3.2.<-findFDR(de3.,level = 0.05)
rm(list=ls())
de3.1
2000/8124
