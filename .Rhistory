library(intSEQ)
install.packages(c("MASS", "mgcv", "rpart"))
install.packages(c("MASS", "mgcv", "Rcpp", "rpart"))
data(count.data)
data(condition)
count=count.data[,1:10]
cond=rep(0:1,each=5)
res=intSEQ(count, cond)
library(intSEQ)
res=intSEQ(count, cond)
source('E:/package/intSEQ/R/simuComp.R')
source('E:/package/intSEQ/R/simuComp1.R')
simu.res <- simuComp(res, ntime = 2)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 2)
simu.res <- simuComp(res, ntime = 2)
source('E:/package/intSEQ/R/intSEQ.default.R')
simu.res <- simuComp(res, ntime = 2)
data("condition")
design <- model.matrix(~., data = condition)
condition
as.vector(condition)
simu.res <- simuComp(res, ntime = 2)
library(intSEQ)
simu.res <- simuComp(res, ntime = 2)
example("simuComp")
cond = c(1,1,1,2,2,2)
cond = as.data.frame(codn)
cond = as.data.frame(cond)
cond
levs <- unique(cond)
levs
cond==levs
#  start.time <- proc.time()
cond = as.vector(cond)
cond
class(cond)
#  start.time <- proc.time()
cond = as.vector(cond)
unlist
unlist(cond)
levs <- unique(cond)
cond==levs[1]
cond==levs[1]
cond=unlist(cond)
levs <- unique(cond)
cond==levs[1]
source('E:/package/intSEQ/R/tran.reg.R')
library(intSEQ)
example("simuComp")
load("F:/recount2/T2D/p16.rda")
library(intSEQ)
null16[1,1]
null16
dim(null16)
99874/2
intp = null16[1:49937,]
quasip = null16[49938:99874,]
?pcut
plot( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(intp),
log="xy",ylim=c(1e-6,0.5),xlab = "levels",ylab = "FPR",type = "b",
main = "FPR Plot of Integrated and Quasi Method")
points( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(intp), type = "b",col=2)
points( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(quasip), type = "b",col=2)
plot( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(intp),
log="xy",ylim=c(1e-6,0.5),xlab = "levels",ylab = "FPR",type = "b",
main = "FPR Plot of Integrated and Quasi Method")
points( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(quasip), type = "b",col=2)
abline(a=0,b=1,lty=2)
legend("topright",legend = c("integrated","Quasi"),lty=1,col=1:2)
legend("topleft",legend = c("integrated","Quasi"),lty=1,col=1:2)
plot( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(intp),
log="xy",ylim=c(1e-6,0.5),xlab = "levels",ylab = "FPR",type = "b",
main = "FPR Plot of Integrated and Quasi Method")
points( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(quasip), type = "b",col=2)
abline(a=0,b=1,lty=2)
legend("topleft",legend = c("integrated","Quasi"),lty=1,col=1:2)
plot( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(intp),
log="xy",ylim=c(1e-6,0.5),xlab = "levels",ylab = "FPR",type = "b",
main = "FPR Plot of Integrated and Quasi Method, n=16")
points( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(quasip), type = "b",col=2)
abline(a=0,b=1,lty=2)
legend("topleft",legend = c("integrated","Quasi"),lty=1,col=1:2)
load("F:/recount2/T2D/p20.rda")
intp = null20[1:49937,]
quasip = null20[49938:99874,]
plot( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(intp),
log="xy",ylim=c(1e-6,0.5),xlab = "levels",ylab = "FPR",type = "b",
main = "FPR Plot of Integrated and Quasi Method, n=20")
points( c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.05, 0.1),pcut(quasip), type = "b",col=2)
abline(a=0,b=1,lty=2)
legend("topleft",legend = c("integrated","Quasi"),lty=1,col=1:2)
library(intSEQ)
library(intSEQ)
library(intSEQ)
marginal.LR
inSEQ.default
intSEQ.default
library(intSEQ)
library(intSEQ)
?simuComp
data(count.data)
data(condition)
count=count.data[,1:10]
cond=rep(0:1,each=5)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5)
plotComp(simu.res)
simu.res <- simuComp(res, ntime = 5,null = T)
plotComp(simu.res)
?aghQuad
?aghQuad
library(intSEQ)
data(count.data)
data(condition)
count=count.data[,1:10]
cond=rep(0:1,each=5)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5,null = T)
plotComp(simu.res)
library(intSEQ)
data(count.data)
data(condition)
count=count.data[,1:10]
cond=rep(0:1,each=5)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:10]
cond=rep(0:1,each=10)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5,null = T)
count=count.data[,1:20]
cond=rep(0:1,each=10)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5,null = T)
plotComp(simu.res)
library(fastGHQuad)
?ghQuad
library(intSEQ)
library(intSEQ)
data(count.data)
data(condition)
count=count.data[,1:20]
cond=rep(0:1,each=10)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:40]
cond=rep(0:1,each=20)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 5,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=2=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 10,null = T)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=2=30)
res=intSEQ(count, cond)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 10,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 10,null = T)
plotComp(simu.res)
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 20,null = T)
plotComp(simu.res)
condition
data(count.data)
data(condition)
count=count.data[,1:60]
cond=rep(0:1,each=30)
res=intSEQ(count, cond)
simu.res <- simuComp(res, ntime = 30,null = T)
plotComp(simu.res)
res=intSEQ(count.data, condition)
simu.res <- simuComp(res, ntime = 30,null = T)
plotComp(simu.res)
simu.res <- simuComp(res, ntime = 10,nsamp = 30,null = T)
plotComp(simu.res)
library(intSEQ)
simu.res100 <- simuComp(res, ntime = 5,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=0.97,w2=0.97)
library(intSEQ)
data(count.data)
data(condition)
res=intSEQ(count.data, condition,w1=1,w2=1)
simu.res3001 <- simuComp(res, ntime = 5,nsamp = 150,null = T,w1=0.7,w2=0.7)
simu.res100 <- simuComp(res, ntime = 5,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=0.97,w2=0.97)
library(intSEQ)
data(count.data)
data(condition)
res=intSEQ(count.data, condition,w1=1,w2=1)
simu.res3001 <- simuComp(res, ntime = 5,nsamp = 150,null = T,w1=0.7,w2=0.7)
simu.res100 <- simuComp(res, ntime = 5,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=0.97,w2=0.97)
plotComp(simu.res3001)
plotComp(simu.res100)
plotComp(simu.res50)
plotComp(simu.res30)
simu.res50 <- simuComp(res, ntime = 5,nsamp = 50,null = T,w1=1,w2=1)
simu.res30 <- simuComp(res, ntime = 5,nsamp = 30,null = T,w1=1,w2=1)
simu.res3 <- simuComp(res, ntime = 10,nsamp = 3,null = T,w1=1,w2=1)
plotComp(simu.res30)
simu.res30 <- simuComp(res, ntime = 10,nsamp = 30,null = T,w1=1,w2=1)
plotComp(simu.res30)
simu.res3 <- simuComp(res, ntime = 40,nsamp = 3,null = T,w1=1,w2=1)
plotComp(simu.res3)
simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=1,w2=1)
plotComp(simu.res30)
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
fullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond,m0,ma, null=F,const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ghrule <- gaussHermiteData(50)
w1=0.9=w2
w2=0.9
data = rnbinom(1-,mu=5,size=1)
data = rnbinom(1,mu=5,size=1)
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
sdd=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ghrule <- gaussHermiteData(50)
library(fastGHQuad)
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
w1=0.9
w2=0.9
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -n
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
sigma
sqrt(-1/Hhat)
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
sqrt(-1/Hhat)
muu
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
const=1
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc, rule = ghrule)
nullLik2
w1=1
w2=1
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
nullLik2=ghQuad(f = nullfunc, rule = ghrule)
nullLik
nullLik2
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
w1=1
w2=1
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = log(muu), sigmaHat = sigma, rule = ghrule)
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 2, rule = ghrule)
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik
nullLik=aghQuad(g = nullfunc, muHat = 5, sigmaHat = 2, rule = ghrule)
nullLik
nullLik=aghQuad(g = nullfunc, muHat = 5, sigmaHat = 2, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 2, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
data = rnbinom(1,mu=5,size=1)
sdd=1
cond=c(0,0,0,0,0,1,1,1,1,1)
m0=mean(data)
const=1
nullfunc <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y)
}
nullfunc2 <- function(y){
joint.likelihood(exp(y),ys=data, cond=cond, m0, ma, null=T, const)*dnorm(exp(y)
,mean = m,sd = sdd)*exp(y+y^2)
}
ghrule <- gaussHermiteData(50)
m=0.9
thet = 1.1
#Hhat = -1
muu = w1*m+(1-w1)*thet
#Hhat = Hessian(dat = data, theta = muu, sigma = sdd)
Hhat = -10
if(is.nan(Hhat)) {
w2=1
Hhat=-1
}
sigma = w2*2+(1-w2)*sqrt(-1/Hhat)
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 1, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 0.1, rule = ghrule)
nullLik
nullLik=aghQuad(g = nullfunc, muHat = 0, sigmaHat = 0.9, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
nullLik=aghQuad(g = nullfunc, muHat = 0.1, sigmaHat = 0.9, rule = ghrule)
nullLik
nullLik2=ghQuad(f = nullfunc2, rule = ghrule)
nullLik2
?ghQuad
?gaussHermiteData
simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=0.97,w2=0.97)
plotComp(simu.res30)
library(intSEQ)
simu.res100 <- simuComp(res, ntime = 20,nsamp = 100,null = T,w1=0.9,w2=0.9)
simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,null = T,w1=.95,w2=.95)
simu.res30 <- simuComp(res, ntime = 20,nsamp = 30,null = T,w1=0.97,w2=0.97)
plotComp(simu.res30)
plotComp(simu.res50)
plotComp(simu.res100)
simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,,lambda1=200,null = T,w1=.95,w2=.95)
plotComp(simu.res50)
simu.res50 <- simuComp(res, ntime = 20,nsamp = 50,,lambda1=500,null = T,w1=.95,w2=.95)
plotComp(simu.res50)
library(intSEQ)
library(intSEQ)
